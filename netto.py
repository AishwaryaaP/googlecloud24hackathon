# -*- coding: utf-8 -*-
"""Netto.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TaJMnCLZW2xIRI9QvzVIQbfY7hVq3XMR
"""

!pip install requests pandas



"""API_KEY=""
curl -H 'Content-Type: application/json' \
     -d '{"contents":[
            {"role": "user",
              "parts":[{"text": "Give me five subcategories of jazz?"}]}]}' \
     "https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=${API_KEY}"""

import pandas as pd

# Replace 'your_file.csv' with the name of the uploaded CSV file
df = pd.read_csv('assetdata.csv')

# Display the first few rows of the dataframe
df.head()

import requests

# Replace 'YOUR_API_KEY' with your actual Google Gemini API key
API_KEY = 'AIzaSyDvvX_9Yl9qPM25tqqpoNpJW6CIaSwLczA'
API_URL = 'https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=${API_KEY}'
 # Make sure to check the correct endpoint

def query_gemini(prompt):
    headers = {
        'Authorization': f'Bearer {API_KEY}',
        'Content-Type': 'application/json'
    }
    data = {
        'model': 'gemini-1',  # Replace with the appropriate model name if different
        'messages': [{'role': 'user', 'content': prompt}]
    }
    response = requests.post(API_URL, headers=headers, json=data)
    return response.json()

def query_data(query):
    # Example function: Implement your logic to search the DataFrame based on the query
    # For simplicity, this just checks if the query matches any row's content
    results = df[df.apply(lambda row: row.astype(str).str.contains(query, case=False).any(), axis=1)]
    if not results.empty:
        return results.to_string(index=False)
    else:
        return "No matching data found."

def interactive_chatbot():
    print("Hello! I'm your interactive chatbot. Type 'exit' to end the chat.")
    while True:
        user_input = input("You: ")
        if user_input.lower() == 'exit':
            print("Goodbye!")
            break

        # Query the Gemini API
        gemini_response = query_gemini(user_input)
        gemini_reply = gemini_response.get('choices', [{}])[0].get('message', {}).get('content', '')

        # Query the local data
        data_response = query_data(user_input)

        # Combine responses
        if gemini_reply:
            print(f"Gemini: {gemini_reply}")
        if data_response:
            print(f"Data Response: {data_response}")

# Run the chatbot
interactive_chatbot()
